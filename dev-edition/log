Finding usage for on-push compile
Finding usage for on-push all deved tests
test-linux64-devedition/opt-telemetry-tests-client-e10s is in state failed instead of completed, ignoring
test-windows7-32-devedition/opt-web-platform-tests-e10s-11 is in state failed instead of completed, ignoring
test-linux32-devedition/opt-mochitest-browser-chrome-e10s-2 is in state failed instead of completed, ignoring
Finding usage for release promote
Finding usage for release push
Finding usage for release ship
Finding usage for release EME-free repack

Time spent on full build:
-------------------------
Data for on-push compile (seconds):
gecko-t-linux-xlarge                 1263
gecko-3-b-linux                     13866
signing-linux-v1                      842
gecko-3-b-win2012                   14986

Data for on-push all deved tests (seconds):
gecko-t-win10-64-hw                  2635
gecko-t-win7-32                     44475
gecko-t-win7-32-gpu                 15565
gecko-t-osx-1010                    48998
gecko-t-linux-xlarge                40221
gecko-t-win10-64-gpu                 4457
gecko-t-win10-64                    40012
gecko-t-linux-large                 90511

Data for release promote (seconds):
gecko-3-b-linux                    203031
beetmoverworker-v1                  25180
balrogworker-v1                      8737
signing-linux-v1                    66617
gecko-3-b-win2012                  291854

Data for release push (seconds):

Data for release ship (seconds):
shipit-v1                              10
balrogworker-v1                         7
gecko-3-b-linux                         7

Estimated time spent by repacking:
----------------------------------
Data for release EME-free repack (seconds):
gecko-3-b-macosx64                  13870
gecko-3-b-linux                     17239
beetmoverworker-v1                  18074
signing-linux-v1                    27555
gecko-3-b-win2012                  161230

Caveats:
* a DevEdition repack would probably be more complicated than EME-free and take longer
* Linux repacks would be slower than the Mac-based estimate because thay have to bz decompress
  a tar.bz2 before adding files, then recompress; Mac just appends to a zip
* This will probably still be small beer compared to windows repackage work on gecko-3-b-win2012
  (see also bug 1438894)
* unclear what to do about some work, eg langpacks, update verify, source
* we are already slamming the mac signing servers with peak load for partner and EME-free repacks
  and need to do some work there to improve chunking. This may slow signing down.
* non-trivial chance I've incorrectly assigned cpu time

Comments:
* This is all broad brush strokes but
  * switching to a repack could have a significant effect on total CPU seconds - roughly 50% lower
    than the ~595k for each release. Frequency is not high - 2 per week, assuming one build per
    beta
  * on-push build is more modest, 31k seconds, but might be significant if the number of pushes
    is considered
  * switching off on-push tests (if that's sensible) could save ~285k seconds per push. Some of
    that is on physical pools which have a fixed sized contraint but different cost metrics
  * we need to turn these into $ per release cycle to get a better idea of impact
* As well as considering compute time, we also care about wall clock time for releases. A repack
  would wait until all the Beta l10n is done, rather than proceeding in parallel.

